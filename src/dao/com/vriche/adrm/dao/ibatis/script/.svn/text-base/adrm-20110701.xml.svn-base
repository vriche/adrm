create procedure pro_check_tape_code_update(tapecode int)   
 begin   
 declare  myid int ;
 declare  nextcode  int;
 declare stop int default 0;
 
 DECLARE cur CURSOR FOR  SELECT adver_matter_id from  tb_adver_matter where tape_code = tapecode;
 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into myid;
 while stop <> 1 do  
             SELECT current_next into nextcode  from tb_sys_sequence where name = 'sequence_tb_adver_matter';  
			 update tb_adver_matter set  tape_code = lpad(nextcode,5,'0')  where   adver_matter_id = myid;    
             update tb_sys_sequence set current_next = nextcode+1  where name = 'sequence_tb_adver_matter';  
        fetch cur into myid;
    end while;  
 close cur; 
end;   
 |


create procedure pro_check_tape_code()   
begin   
 declare  tapecode  int;
 declare  maxId int ;
 declare stop int default 0;

DECLARE cur CURSOR FOR  select tape_code from tb_adver_matter group by tape_code having count(tape_code) > 1;
DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into tapecode;
while stop <> 1 do            
		call pro_check_tape_code_update(tapecode);       
        fetch cur into tapecode;
    end while;  
 close cur; 
 end;   
|  


create procedure pro_check_tape_code2_update(ad_name varchar(30) ,ad_edit varchar(30) ,ad_len varchar(30))   
 begin   
 declare  myid int ;
 declare  i int default 0;
 declare  newid int  default 0;
 declare stop int default 0;
 
 DECLARE cur CURSOR FOR   SELECT adver_matter_id from  tb_adver_matter where name = ad_name  and edit = ad_edit and length = ad_len;
 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into myid;
 while stop <> 1 do  
	set i = i+1;
	if i = 1 then
		set newid = myid;
	end if;

	if i >1 then
		update tb_order_detail set  adver_matter_id = newid where adver_matter_id = myid;
	end if;
         
        fetch cur into myid;

    end while;  
 close cur; 
end;   

 |

create procedure pro_check_tape_code2()   
begin   
 declare  ad_name varchar(30);
 declare  ad_edit varchar(30);
 declare  ad_len varchar(30);
 declare stop int default 0;

 DECLARE cur CURSOR FOR  select name,edit,length from tb_adver_matter group by  name,edit,length  having count(name) > 1;
 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into ad_name,ad_edit,ad_len;
 while stop <> 1 do  
        call pro_check_tape_code2_update(ad_name,ad_edit,ad_len);
        fetch cur into  ad_name,ad_edit,ad_len;
 end while;  
 close cur; 
end;   

 |




create procedure pro_check_tape_code_update_test(tapecode varchar(30))   
 begin   
 declare  myid int ;
 declare  starndcodeid int;
 declare stop int default 0;
 declare i int default 0;
 
 DECLARE cur CURSOR FOR  SELECT adver_matter_id from  tb_adver_matter where tape_code = tapecode;
 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into myid;
 while stop <> 1 do  
             set i = i+1;
             if ( i = 1)  then 
                set starndcodeid = myid;
             else 
                update tb_order_detail set adver_matter_id = starndcodeid where adver_matter_id = myid; 
             end if;

        fetch cur into myid;
    end while;  
 close cur; 

  delete from tb_adver_matter where adver_matter_id != starndcodeid and tape_code = tapecode;
   

end;   
 |



create procedure pro_check_tape_code_test()   
begin   
 declare  tapecode  varchar(30);
 declare  maxId int ;
 declare stop int default 0;

DECLARE cur CURSOR FOR  select tape_code from tb_adver_matter group by tape_code having count(tape_code) > 1;
DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into tapecode;
while stop <> 1 do            
		call pro_check_tape_code_update_test(tapecode);       
        fetch cur into tapecode;
    end while;  
 close cur; 
 end;   
|  







create procedure pro_check_tb_contract_payment_update (contractId varchar(30) ,orderId varchar(30) ,payNumber varchar(30))   
 begin   
 declare  myid int ;
 declare  i int default 0;
 declare stop int default 0;
 
DECLARE cur CURSOR FOR  select contract_payment_id from tb_contract_payment where contract_id = contractId and order_id = orderId and pay_number = payNumber;

 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into myid;
 while stop <> 1 do  
	    set i = i+1;
        update tb_contract_payment set  pay_number = i  where   contract_payment_id = myid;
        fetch cur into myid;
    end while;  
 close cur; 
end;   
 |


create procedure pro_check_tb_contract_payment()   
begin   
 declare  contractId  int;
 declare  orderId  int;
 declare  payNumber int ;
 declare i int default 0;
 declare stop int default 0;

DECLARE cur CURSOR FOR  select contract_id,order_id,pay_number from tb_contract_payment group by contract_id,order_id,pay_number having count(contract_id) > 1;
DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into contractId,orderId,payNumber;
while stop <> 1 do  
		call pro_check_tb_contract_payment_update(contractId,orderId,payNumber);                             
        fetch cur into contractId,orderId,payNumber;
    end while;  
 close cur; 
 end;   
|  


create procedure pro_check_tb_income_code_update (incomecode varchar(30))   
 begin   
 declare  myid int ;
 declare  i int default 0;
 declare incomecodenew varchar(30);
 declare stop int default 0;
 
 DECLARE cur CURSOR FOR  select income_id from  tb_income where income_code = incomecode;
 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into myid;
 while stop <> 1 do  
             set i = i+1;
	         set incomecodenew = concat(incomecode,'__');
			 set incomecodenew = concat(incomecodenew,i);
             update tb_income set  income_code = incomecodenew  where   income_id = myid;
        fetch cur into myid;
    end while;  
 close cur; 
end;   
 |


create procedure pro_check_tb_income_code()   
begin   
 declare  incomecode varchar(30);
 declare stop int default 0;
DECLARE cur CURSOR FOR  select income_code from tb_income group by income_code  having count(income_code) > 1 ;
DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into incomecode;
while stop <> 1 do  
		call pro_check_tb_income_code_update(incomecode);                    
        fetch cur into incomecode;
    end while;  
 close cur; 
 end;   
|  










create procedure pro_check_tape_code_update_test(tapecode varchar(30))   
 begin   
 declare  myid int ;
 declare  starndcodeid int;
 declare stop int default 0;
 declare i int default 0;
 
 DECLARE cur CURSOR FOR  SELECT adver_matter_id from  tb_adver_matter where tape_code = tapecode;
 DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into myid;
 while stop <> 1 do  
             set i = i+1;
             if ( i == 1)  then 
                set starndcodeid = myid;
             else 
                update tb_order_detail set adver_matter_id = starndcodeid where adver_matter_id = myid; 
             end if;

        fetch cur into myid;
    end while;  
 close cur; 

  delete from tb_adver_matter where adver_matter_id != starndcodeid and tape_code = tapecode;
   

end;   
 |


create procedure pro_check_tape_code_test()   
begin   
 declare  tapecode  varchar(30);
 declare  maxId int ;
 declare stop int default 0;

DECLARE cur CURSOR FOR  select tape_code from tb_adver_matter group by tape_code having count(tape_code) > 1;
DECLARE CONTINUE HANDLER FOR NOT FOUND  SET stop=1;   
 open cur;   
 fetch cur into tapecode;
while stop <> 1 do            
		call pro_check_tape_code_update_test(tapecode);       
        fetch cur into tapecode;
    end while;  
 close cur; 
 end;   
|  















 