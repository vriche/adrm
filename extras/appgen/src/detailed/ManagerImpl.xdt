<XDtTagDef:tagDef namespace="Form" handler="org.example.antbook.xdoclet.FormTagsHandler"/>
<XDtTagDef:tagDef namespace="MethodEx" handler="org.example.antbook.xdoclet.MethodExTagsHandler"/>
package <XDtForm:parentPackageName/>.service.impl;

import java.util.Map;
import java.util.List;
import java.util.Iterator;

import <XDtConfig:configParameterValue paramName="basePackageName"/>.service.impl.BaseManager;
import <XDtPackage:packageName/>.<XDtForm:className/>;
import <XDtForm:parentPackageName/>.dao.<XDtForm:className/>Dao;
import <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager;

public class <XDtForm:className/>ManagerImpl extends BaseManager implements <XDtForm:className/>Manager {
    private <XDtForm:className/>Dao dao;

    /**
     * Set the Dao for communication with the data layer.
     * @param dao
     */
    public void set<XDtForm:className/>Dao(<XDtForm:className/>Dao dao) {
        this.dao = dao;
    }
    
   /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#get<XDtForm:className/>s(<XDtPackage:packageName/>.<XDtForm:className/>)
     */
    public List get<XDtForm:className/>s(final <XDtForm:className/> <XDtForm:classNameLower/>) {
        return dao.get<XDtForm:className/>s(<XDtForm:classNameLower/>);
    }
    
    
   /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#get<XDtForm:className/>sCount(<XDtPackage:packageName/>.<XDtForm:className/>)
     */
    public String get<XDtForm:className/>sCount(final <XDtForm:className/> <XDtForm:classNameLower/>) {
        return dao.get<XDtForm:className/>sCount(<XDtForm:classNameLower/>).toString();
    }    

   /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#get<XDtForm:className/>sCount(<XDtPackage:packageName/>.<XDtForm:className/>)
     */    
	public List get<XDtForm:className/>sPage(final <XDtForm:className/> <XDtForm:classNameLower/>,String pageIndex, String pageSize) {
		return dao.get<XDtForm:className/>sPage(<XDtForm:classNameLower/>,Integer.parseInt(pageIndex),Integer.parseInt(pageSize));
	}    
	
	
	
   /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#get<XDtForm:className/>sCount(<XDtPackage:packageName/>.<XDtForm:className/>)
     */    
	public String get<XDtForm:className/>sPageXML(final <XDtForm:className/> <XDtForm:classNameLower/>,String pageIndex, String pageSize) {
	    StringBuffer sb = new StringBuffer();
	    List ls = dao.get<XDtForm:className/>sPage(<XDtForm:classNameLower/>,Integer.parseInt(pageIndex),Integer.parseInt(pageSize));
		sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		sb.append("<rows>");   
		for(Iterator it = ls.iterator();it.hasNext();){
			<XDtForm:className/> obj = (<XDtForm:className/>)it.next();
			sb.append("<row  id=\""+ obj  +"\"" +">");
			sb.append("<cell><![CDATA["+ obj  +"]]></cell>");
			sb.append("</row>");
		}
		sb.append("</rows>");	
		return sb.toString();
	}    
		
	
	
    
    

    /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#get<XDtForm:className/>(String <XDtMethodEx:idField getType="propertyName"/>)
     */
    public <XDtForm:className/> get<XDtForm:className/>(final String <XDtMethodEx:idField getType="propertyName"/>) {
        return dao.get<XDtForm:className/>(new <XDtMethodEx:idField getType="propertyType"/>(<XDtMethodEx:idField getType="propertyName"/>));
    }
    
    /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#get<XDtForm:className/>sByIdList(final Map idList)
     */
    public List get<XDtForm:className/>sByMap(final Map mp) {
        return dao.get<XDtForm:className/>sByMap(mp);
    }    
    

    /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#save<XDtForm:className/>(<XDtForm:className/> <XDtForm:classNameLower/>)
     */
    public String save<XDtForm:className/>(<XDtForm:className/> <XDtForm:classNameLower/>) {
        return dao.save<XDtForm:className/>(<XDtForm:classNameLower/>).toString();
    }

    /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#remove<XDtForm:className/>(String <XDtMethodEx:idField getType="propertyName"/>)
     */
    public void remove<XDtForm:className/>(final String <XDtMethodEx:idField getType="propertyName"/>) {
        dao.remove<XDtForm:className/>(new <XDtMethodEx:idField getType="propertyType"/>(<XDtMethodEx:idField getType="propertyName"/>));
    }

    
     /**
     * @see <XDtForm:parentPackageName/>.service.<XDtForm:className/>Manager#remove<XDtForm:className/>s(String Map)
     */
    public void remove<XDtForm:className/>s(final Map mp) {
        dao.remove<XDtForm:className/>s(mp);
    }    
}
